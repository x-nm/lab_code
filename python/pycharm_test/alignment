# alignment function
# 2017.07 31 by xnm

# alpha, beta, gamma as global var
alpha = 10
beta = -2
gamma = -5


# for match(i,j)
def match(pos1, pos2):
    if pos1 == pos2:
        return alpha
    else:
        return beta


# Alignment
# Input:
#     seq1, seq2
#     alpha: score of match
#     beta: score of mismatch
#     gamma: score of gap
# Output:
#     global alignment score of seq1 and seq2
#    path of the oplimal alignment
def alignment(seq1, seq2):
    n = len(seq1)
    m = len(seq2)
    # initialization - for the whole matrix
    # score = [[0 for i in range(m+1)]] * (n+1) # wrong way
    score = [[0 for i in range(m + 1)] for k in range(n + 1)]
    path = [[0 for i in range(m + 1)] for k in range(n + 1)]
    for i in range(n + 1):
        for j in range(m + 1):
            if i == 0 and j == 0:
                score[i][j] = 0
            elif i == 0:
                score[i][j] = -5 * j
            elif j == 0:
                score[i][j] = -5 * i
            else:
                score[i][j] = 0
    # Scoring
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            score[i][j] = max(score[i - 1][j - 1] + match(seq1[i - 1], seq2[j - 1]), score[i - 1][j] - 5,
                              score[i][j - 1] - 5)
            if score[i][j] == score[i - 1][j - 1] + match(seq1[i - 1], seq2[j - 1]):
                path[i][j] += 4  # += for multiple paths. 4 for \
            if score[i][j] == score[i - 1][j] - 5:
                path[i][j] += 1 # 1 for |
            if score[i][j] == score[i][j - 1] - 5:
                path[i][j] += 2 # 2 for >
    # find the optimal alignment
    max_score = score[n][m]
    print "The max score is " + str(max_score) + '\n'

    # print score matrix
    '''
    for i in score:
        print i
    for i in path:
        print i
    '''

    # trace back
    i = m-1
    j = n-1
    ans1 = []
    ans2 = []
    while i>=0 and j>=0:
        if path[i][j] == 4 or path[i][j] == 5 or path[i][j] == 6:
            ans1.insert(0, seq1[i])
            ans2.insert(0, seq2[j])
            i = i - 1
            j = j - 1
        elif path[i][j] == 1 or path[i][j] == 3:
            ans1.insert(0, seq1[i])
            ans2.insert(0, '-')
            i = i - 1
        elif path[i][j] == 2:
            ans1.insert(0, '-')
            ans2.insert(0, seq2[j])
            j = j - 1

    print 'The match is:'
    print ''.join(ans1)
    print ''.join(ans2)

def test():
    s1 = "CATTCAC"
    s2 = "CTCGCAGC"
    alignment(s1, s2)


test()