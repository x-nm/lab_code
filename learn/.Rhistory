setwd("D:\\xnm\\work\\Rabbit_RNASeq")
library("DESeq2")
options(stringsAsFactors = FALSE)
raw<-read.table("raw_count.txt",header = T)
colnames(raw)[1]<-"67" # colname of "67" will be turned into "X67"
sps<-read.table("samples.txt",header = F)
setwd("D:\\xnm\\work\\Rabbit_RNASeq\\output/")
# Functions:
# 0.1 From symbol abbr to long symbol:
sybTrans <- function(symbol){
if (symbol=="W" ) return("WHHL")
if (symbol=="J" ) return("JW")
if (symbol=="N" ) return("NZW")
if (symbol=="H" ) return("NZW-HC")
}
query<-"NZW_embryo_VS_aorta"
querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
View(sp1Data)
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
setwd("D:\\xnm\\work\\Rabbit_RNASeq")
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
query<-"HN_Heart" # Heart/coronary(HN), WJ_Liver, HN_Kidney, WJ_Heart
sp1<-substr(query,1,1) # CASE
sp2<-substr(query,2,2) # CTL
tissue<-strsplit(query,"_")[[1]][2]
# If input by define sp1, sp2, tissue directly:
query<-paste(sp1,sp2,"_",tissue, sep="")
sp1<-sybTrans(sp1)
sp2<-sybTrans(sp2)
# FOR Heart/coronary, in case not trouble saving results:
# query<-"HN_Heart_coronary"
querySp1Sps<-subset(sps, sps[2]==paste0(sp1,"-",tissue))[,1]
# the sps get from samples file are in different sequence with those in raw data.
querySp2Sps<-subset(sps, sps[2]==paste0(sp2,"-",tissue))[,1]
################################
# # FOR NZW-embryo VS NZW-HC-Aorta
# query<-"NZW_embryo_VS_aorta"
# querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
# querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
################################
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
#######################################################################################
# the rest parts of code
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
query<-"WJ_Heart" # Heart/coronary(HN),WJ_Heart, WJ_Liver, HN_Kidney
sp1<-substr(query,1,1) # CASE
sp2<-substr(query,2,2) # CTL
tissue<-strsplit(query,"_")[[1]][2]
# If input by define sp1, sp2, tissue directly:
query<-paste(sp1,sp2,"_",tissue, sep="")
sp1<-sybTrans(sp1)
sp2<-sybTrans(sp2)
# FOR Heart/coronary, in case not trouble saving results:
# query<-"HN_Heart_coronary"
querySp1Sps<-subset(sps, sps[2]==paste0(sp1,"-",tissue))[,1]
# the sps get from samples file are in different sequence with those in raw data.
querySp2Sps<-subset(sps, sps[2]==paste0(sp2,"-",tissue))[,1]
################################
# # FOR NZW-embryo VS NZW-HC-Aorta
# query<-"NZW_embryo_VS_aorta"
# querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
# querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
################################
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
#######################################################################################
# the rest parts of code
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
rm(summ)
query<-"WJ_Liver" # Heart/coronary(HN),WJ_Heart, WJ_Liver, HN_Kidney
sp1<-substr(query,1,1) # CASE
sp2<-substr(query,2,2) # CTL
tissue<-strsplit(query,"_")[[1]][2]
# If input by define sp1, sp2, tissue directly:
query<-paste(sp1,sp2,"_",tissue, sep="")
sp1<-sybTrans(sp1)
sp2<-sybTrans(sp2)
# FOR Heart/coronary, in case not trouble saving results:
# query<-"HN_Heart_coronary"
querySp1Sps<-subset(sps, sps[2]==paste0(sp1,"-",tissue))[,1]
# the sps get from samples file are in different sequence with those in raw data.
querySp2Sps<-subset(sps, sps[2]==paste0(sp2,"-",tissue))[,1]
################################
# # FOR NZW-embryo VS NZW-HC-Aorta
# query<-"NZW_embryo_VS_aorta"
# querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
# querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
################################
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
#######################################################################################
# the rest parts of code
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
query<-"HN_Liver" # Heart/coronary(HN),WJ_Heart, WJ_Liver, HN_Kidney
sp1<-substr(query,1,1) # CASE
sp2<-substr(query,2,2) # CTL
tissue<-strsplit(query,"_")[[1]][2]
# If input by define sp1, sp2, tissue directly:
query<-paste(sp1,sp2,"_",tissue, sep="")
sp1<-sybTrans(sp1)
sp2<-sybTrans(sp2)
# FOR Heart/coronary, in case not trouble saving results:
# query<-"HN_Heart_coronary"
querySp1Sps<-subset(sps, sps[2]==paste0(sp1,"-",tissue))[,1]
# the sps get from samples file are in different sequence with those in raw data.
querySp2Sps<-subset(sps, sps[2]==paste0(sp2,"-",tissue))[,1]
################################
# # FOR NZW-embryo VS NZW-HC-Aorta
# query<-"NZW_embryo_VS_aorta"
# querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
# querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
################################
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
#######################################################################################
# the rest parts of code
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
query<-"HN_Kidney" # Heart/coronary(HN),WJ_Heart, WJ_Liver, HN_Kidney
sp1<-substr(query,1,1) # CASE
sp2<-substr(query,2,2) # CTL
tissue<-strsplit(query,"_")[[1]][2]
# If input by define sp1, sp2, tissue directly:
query<-paste(sp1,sp2,"_",tissue, sep="")
sp1<-sybTrans(sp1)
sp2<-sybTrans(sp2)
# FOR Heart/coronary, in case not trouble saving results:
# query<-"HN_Heart_coronary"
querySp1Sps<-subset(sps, sps[2]==paste0(sp1,"-",tissue))[,1]
# the sps get from samples file are in different sequence with those in raw data.
querySp2Sps<-subset(sps, sps[2]==paste0(sp2,"-",tissue))[,1]
################################
# # FOR NZW-embryo VS NZW-HC-Aorta
# query<-"NZW_embryo_VS_aorta"
# querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
# querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
################################
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
#######################################################################################
# the rest parts of code
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
query<-"WJ_Kidney" # Heart/coronary(HN),WJ_Heart, WJ_Liver, HN_Kidney
sp1<-substr(query,1,1) # CASE
sp2<-substr(query,2,2) # CTL
tissue<-strsplit(query,"_")[[1]][2]
# If input by define sp1, sp2, tissue directly:
query<-paste(sp1,sp2,"_",tissue, sep="")
sp1<-sybTrans(sp1)
sp2<-sybTrans(sp2)
# FOR Heart/coronary, in case not trouble saving results:
# query<-"HN_Heart_coronary"
querySp1Sps<-subset(sps, sps[2]==paste0(sp1,"-",tissue))[,1]
# the sps get from samples file are in different sequence with those in raw data.
querySp2Sps<-subset(sps, sps[2]==paste0(sp2,"-",tissue))[,1]
################################
# # FOR NZW-embryo VS NZW-HC-Aorta
# query<-"NZW_embryo_VS_aorta"
# querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
# querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
################################
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
#######################################################################################
# the rest parts of code
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
query<-"WJ_Aorta" # Heart/coronary(HN),WJ_Heart, WJ_Liver, HN_Kidney
sp1<-substr(query,1,1) # CASE
sp2<-substr(query,2,2) # CTL
tissue<-strsplit(query,"_")[[1]][2]
# If input by define sp1, sp2, tissue directly:
query<-paste(sp1,sp2,"_",tissue, sep="")
sp1<-sybTrans(sp1)
sp2<-sybTrans(sp2)
# FOR Heart/coronary, in case not trouble saving results:
# query<-"HN_Heart_coronary"
querySp1Sps<-subset(sps, sps[2]==paste0(sp1,"-",tissue))[,1]
# the sps get from samples file are in different sequence with those in raw data.
querySp2Sps<-subset(sps, sps[2]==paste0(sp2,"-",tissue))[,1]
################################
# # FOR NZW-embryo VS NZW-HC-Aorta
# query<-"NZW_embryo_VS_aorta"
# querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
# querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
################################
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
#######################################################################################
# the rest parts of code
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
query<-"HN_Aorta" # Heart/coronary(HN),WJ_Heart, WJ_Liver, HN_Kidney
sp1<-substr(query,1,1) # CASE
sp2<-substr(query,2,2) # CTL
tissue<-strsplit(query,"_")[[1]][2]
# If input by define sp1, sp2, tissue directly:
query<-paste(sp1,sp2,"_",tissue, sep="")
sp1<-sybTrans(sp1)
sp2<-sybTrans(sp2)
# FOR Heart/coronary, in case not trouble saving results:
# query<-"HN_Heart_coronary"
querySp1Sps<-subset(sps, sps[2]==paste0(sp1,"-",tissue))[,1]
# the sps get from samples file are in different sequence with those in raw data.
querySp2Sps<-subset(sps, sps[2]==paste0(sp2,"-",tissue))[,1]
################################
# # FOR NZW-embryo VS NZW-HC-Aorta
# query<-"NZW_embryo_VS_aorta"
# querySp1Sps<-subset(sps, sps[2]=="NZW-embryo")[,1]
# querySp2Sps<-subset(sps, sps[2]=="NZW-HC-Aorta")[,1]
################################
sp1Data <- raw[,match(querySp1Sps, colnames(raw))]
sp2Data <- raw[,match(querySp2Sps, colnames(raw))]
countData <- cbind(sp1Data, sp2Data)
num <- ncol(sp1Data)
sp1Col <- cbind(names(sp1Data),c(rep(1,num)))
sp2Col <- cbind(names(sp2Data),c(rep(0,num)))
colData <- rbind(sp1Col, sp2Col) # whether the same format as former?
colnames(colData) <- c("id", "condition")
#######################################################################################
# the rest parts of code
source("D:\\xnm\\work\\CODE\\otherTissueDataPrepare_script2.R")
setwd("D:\\xnm\\work\\DATA\\OB_CV\\raw")
label<-"OB25"
f<-paste0(label,"lfc_raw")
dat<-read.table(f,header = T)
dat<-read.table(f)
dat<-read.table(f, sep = "\t")
dat<-read.table(f, header = T,sep = "\t")
dat<-read.table(f, header = T,sep = "\t")
dat<-read.table(f, header = T,sep = "\t", row.names = 1)
dat<-read.table(f, header = T,sep = "/t", row.names = 1)
dat<-read.table(f, header = T,sep = "\t", row.names = 1)
dat<-read.table(f, header = T,sep = "\t", row.names = 1, na.strings = "NA")
dat<-read.csv(f, header = T,sep = "\t", row.names = 1)
View(dat)
dat<-dat[,c(6,5,1)]
View(dat)
colnames(dat)<-c("ID","LFC","padj")
sum(is.na(dat$ID))
sum(dat$ID=="")
excluded<-which(dat$ID=="")
dat<-dat[-excluded,]
View(dat)
o<-paste0(label,"_LFC.txt")
o<-paste0("../LFC_new/",label,"_LFC.txt")
write.table(dat,o,sep = "\t", quote = F)
label<-"OB2"
f<-paste0(label,"lfc_raw")
dat<-read.csv(f, header = T,sep = "\t", row.names = 1)
dat<-dat[,c(6,5,1)]
colnames(dat)<-c("ID","LFC","padj")
sum(dat$ID=="")
excluded<-which(dat$ID=="")
dat<-dat[-excluded,]
o<-paste0("../LFC_new/",label,"_LFC.txt")
write.table(dat,o,sep = "\t", quote = F)
label<-"CV2"
f<-paste0(label,"lfc_raw")
dat<-read.csv(f, header = T,sep = "\t", row.names = 1)
dat<-dat[,c(6,5,1)]
colnames(dat)<-c("ID","LFC","padj")
sum(dat$ID=="")
excluded<-which(dat$ID=="")
dat<-dat[-excluded,]
o<-paste0("../LFC_new/",label,"_LFC.txt")
write.table(dat,o,sep = "\t", quote = F)
label<-"CV25"
f<-paste0(label,"lfc_raw")
dat<-read.csv(f, header = T,sep = "\t", row.names = 1)
dat<-dat[,c(6,5,1)]
colnames(dat)<-c("ID","LFC","padj")
sum(dat$ID=="")
excluded<-which(dat$ID=="")
dat<-dat[-excluded,]
o<-paste0("../LFC_new/",label,"_LFC.txt")
write.table(dat,o,sep = "\t", quote = F)
source('~/work/CODE/OBCVraw2lfc4hm.R', echo=TRUE)
source('~/work/CODE/OBCVraw2lfc4hm.R', echo=TRUE)
source('~/work/CODE/OBCVraw2lfc4hm.R', echo=TRUE)
source('~/work/CODE/OBCVraw2lfc4hm.R', echo=TRUE)
setwd("D:\\xnm\\work\\Rabbit_RNASeq\\output")
setwd("D:\\xnm\\work\\DATA\\WH\\deseq2_output")
label<-"WJ_Heart"
f<-paste0(label,"_LFC.txt")
dat<-read.csv(f,header = T)
View(dat)
dat<-read.csv(f,header = T, sep = "\t")
View(dat)
dat<-dat[,c(1,3,7)]
View(dat)
colnames(dat)<-c("ID","LFC","padj")
View(dat)
View(dat)
o<-paste0("LFC_new/",label,"_LFC.txt")
write.table(dat, o, sep = "\t", quote = F)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
source('~/work/CODE/whDeseqOut2Lfc4Hm.R', echo=TRUE)
setwd("D:\\xnm\\work\\DATA\\PO")
dat<-read.csv("PO_LFC_old.txt", header = T, sep = "\t")
View(dat)
colnames(dat)<-c("ID","LFC","padj")
write.table(dat, "PO_LFC.txt", sep = "\t", quote = F)
setwd("D:\\xnm\\work\\CODE\\learn")
WHO<-read.csv("WHO.csv", header = TRUE)
require(plyr)
WHO<-arrange(WHO, desc(D))
View(WHO)
m.WHO <- melt(WHO)
require(reshape2)
require(ggplot2)
require(scales)
require(grid)
m.WHO <- melt(WHO)
View(m.WHO)
View(m.WHO)
setwd("D:\\xnm\\work\\17.5.25\\LFC")
dat<-read.csv(f, header = T, sep = "\t")
f<-"HN_Aorta_LFC.txt"
dat<-read.csv(f, header = T, sep = "\t")
View(dat)
dat<-subset(dat,dat$padj<fdr)
fdr<-0.1
fc<-2
dat<-subset(dat,dat$padj<fdr)
View(dat)
dat<-subset(dat,dat$LFC>log2(fc) || dat$LFC < log2((1/fc)))
View(dat)
log2(fc)
log2((1/fc)
)
sum(dat$LFC>2)
sum(dat$LFC<1 & dat$LFC >-1)
dat<-subset(dat,dat$LFC>log2(fc) | dat$LFC < log2((1/fc)))
sum(dat$LFC<1 & dat$LFC >-1)
dim(dat)[1]
print(f)
files<-list.files()
process<-function(f)
{
dat<-read.csv(f, header = T, sep = "\t")
dat<-subset(dat,dat$padj<fdr)
dat<-subset(dat,dat$LFC>log2(fc) | dat$LFC < log2((1/fc)))
print(f)
dim(dat)[1]
}
process(f)
degCount<-function(f)
{
dat<-read.csv(f, header = T, sep = "\t")
dat<-subset(dat,dat$padj<fdr)
dat<-subset(dat,dat$LFC>log2(fc) | dat$LFC < log2((1/fc)))
print(f)
dim(dat)[1]
}
for (i in 1:length(files)){
degCount(files[i])
}
files[1]
degCount(files[2])
degCount<-function(f)
{
dat<-read.csv(f, header = T, sep = "\t")
dat<-subset(dat,dat$padj<fdr)
dat<-subset(dat,dat$LFC>log2(fc) | dat$LFC < log2((1/fc)))
print(f,dim(dat)[1])
}
degCount(files[2])
degCount<-function(f)
{
dat<-read.csv(f, header = T, sep = "\t")
dat<-subset(dat,dat$padj<fdr)
dat<-subset(dat,dat$LFC>log2(fc) | dat$LFC < log2((1/fc)))
print(f)
print(dim(dat)[1])
}
degCount(files[2])
for (i in 1:length(files)){
degCount(files[i])
}
View(dat)
View(dat)
setwd("D:\\xnm\\work\\CODE\\learn")
WHO<-read.csv("WHO.csv", header = TRUE)
require(plyr)
WHO<-arrange(WHO, desc(D))
WHO<- transform(WHO, Country = factor(Country, levels = unique(Country)))
require(reshape2)
require(ggplot2)
require(scales)
require(grid)
m.WHO <- melt(WHO)
m.WHO <- ddply(m.WHO, .(variable), transform, rescale = rescale(value))
View(m.WHO)
s.WHO <- ddply(m.WHO, .(variable), transform, rescale = scale(value))
View(s.WHO)
require(ggplot2)
p<-ggplot(s.WHO, aes(variable, Country)) +
#用tile来进行绘热力图
geom_tile(aes(fill=rescale)) +
scale_fill_gradient2(mid="black", high="red", low="green", name = "Intensity") +
labs(x="Country", y="Index", face = "bold") +
theme_bw() +
theme(
axis.title.x=element_text(size=16),
axis.title.y=element_text(size=16),
axis.text.x=element_text(size=12, colour="grey50"),
axis.text.y=element_text(size=12, colour="grey50"),
legend.title=element_text(size=14),
legend.text=element_text(size=12),
legend.key.size = unit(0.8, "cm"))#需要载入grid包来调整legend的大小
p<-ggplot(s.WHO, aes(variable, Country)) +
#用tile来进行绘热力图
geom_tile(aes(fill=rescale)) +
scale_fill_gradient2(mid="black", high="red", low="green", name = "Intensity") +
labs(x="Country", y="Index", face = "bold") +
theme_bw() +
theme(
axis.title.x=element_text(size=16),
axis.title.y=element_text(size=16),
axis.text.x=element_text(size=12, colour="grey50"),
axis.text.y=element_text(size=12, colour="grey50"),
legend.title=element_text(size=14),
legend.text=element_text(size=12),
legend.key.size = unit(0.8, "cm"))#需要载入grid包来调整legend的大小
require(ggplot2)
p<-ggplot(s.WHO, aes(variable, Country)) +
#用tile来进行绘热力图
geom_tile(aes(fill=rescale))
